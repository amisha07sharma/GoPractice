package main

import (
    "bufio"
    "fmt"
    "io"
    "os"
    "strconv"
    "strings"
)

/*
 * Complete the 'getTotalX' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts following parameters:
 *  1. INTEGER_ARRAY a
 *  2. INTEGER_ARRAY b
 */

func getTotalX(a []int32, b []int32) int32 {
    // Write your code here
    var minOfA int32 = b[0];
    var minOfB int32 = b[0];
    var maxOfA int32 = 0;
    
    for i:=0; i<len(a);i++{
        if (maxOfA<a[i]){
            maxOfA = a[i];
        }
        if(minOfA>a[i] && a[i]>1){
            minOfA = a[i];
        }
    }
    for j:=0 ;j<len(b);j++{
        if(minOfB>b[j]){
            minOfB = b[j];
        }
    }
    var canBeArray []int32;
    var tempMin int32 = minOfA;
    for tempMin<=minOfB{
        if(tempMin>=maxOfA){
        canBeArray = append(canBeArray, tempMin);
        }
        tempMin = tempMin*minOfA;
    }
    fmt.Println(canBeArray)
    var count int32 = 0;
    for i:=0;i<len(canBeArray);i++{
        var temp int32 = 0
        for j:=0;j<len(b);j++{
            if(b[j]%canBeArray[i]==0){
                temp++
            }
        }
        if(temp == int32(len(b))){
            count++;
        }
    }
    
    return count;
}

func main() {
    reader := bufio.NewReaderSize(os.Stdin, 16 * 1024 * 1024)

    stdout, err := os.Create(os.Getenv("OUTPUT_PATH"))
    checkError(err)

    defer stdout.Close()

    writer := bufio.NewWriterSize(stdout, 16 * 1024 * 1024)

    firstMultipleInput := strings.Split(strings.TrimSpace(readLine(reader)), " ")

    nTemp, err := strconv.ParseInt(firstMultipleInput[0], 10, 64)
    checkError(err)
    n := int32(nTemp)

    mTemp, err := strconv.ParseInt(firstMultipleInput[1], 10, 64)
    checkError(err)
    m := int32(mTemp)

    arrTemp := strings.Split(strings.TrimSpace(readLine(reader)), " ")

    var arr []int32

    for i := 0; i < int(n); i++ {
        arrItemTemp, err := strconv.ParseInt(arrTemp[i], 10, 64)
        checkError(err)
        arrItem := int32(arrItemTemp)
        arr = append(arr, arrItem)
    }

    brrTemp := strings.Split(strings.TrimSpace(readLine(reader)), " ")

    var brr []int32

    for i := 0; i < int(m); i++ {
        brrItemTemp, err := strconv.ParseInt(brrTemp[i], 10, 64)
        checkError(err)
        brrItem := int32(brrItemTemp)
        brr = append(brr, brrItem)
    }

    total := getTotalX(arr, brr)

    fmt.Fprintf(writer, "%d\n", total)

    writer.Flush()
}

func readLine(reader *bufio.Reader) string {
    str, _, err := reader.ReadLine()
    if err == io.EOF {
        return ""
    }

    return strings.TrimRight(string(str), "\r\n")
}

func checkError(err error) {
    if err != nil {
        panic(err)
    }
}

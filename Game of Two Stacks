package main

import (
    "bufio"
    "fmt"
    "io"
    "os"
    "strconv"
    "strings"
)

/*
 * Complete the 'twoStacks' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts following parameters:
 *  1. INTEGER maxSum
 *  2. INTEGER_ARRAY a
 *  3. INTEGER_ARRAY b
 */

func twoStacks(maxSum int32, a []int32, b []int32) int32 {
    // Write your code here
    var sum int32 = 0;
    var count int32 = 0;
    for sum<=maxSum{
        var max int32 = a[0];
        var min int32 = a[0];
        if (max< b[0]){
            max = b[0]
        }
        if(min > b[0]){
            min = b[0]
        }
        if(max == a[0] && sum+max <= maxSum){
            sum += max
            a = a[1:]
            count++
        }else if(max == b[0] && sum+max <= maxSum){
            sum += max
            b = b[1:]
            count++
        }else if(min == b[0] && sum+min <= maxSum){
            sum += min
            b = b[1:]
            count++
        }else if(min == a[0] && sum+min <= maxSum){
            sum += min
            a = a[1:]
            count++
        }else{
            break
        }
        fmt.Println(sum)
    }   
    return count;
}

func main() {
    reader := bufio.NewReaderSize(os.Stdin, 16 * 1024 * 1024)

    stdout, err := os.Create(os.Getenv("OUTPUT_PATH"))
    checkError(err)

    defer stdout.Close()

    writer := bufio.NewWriterSize(stdout, 16 * 1024 * 1024)

    gTemp, err := strconv.ParseInt(strings.TrimSpace(readLine(reader)), 10, 64)
    checkError(err)
    g := int32(gTemp)

    for gItr := 0; gItr < int(g); gItr++ {
        firstMultipleInput := strings.Split(strings.TrimSpace(readLine(reader)), " ")

        nTemp, err := strconv.ParseInt(firstMultipleInput[0], 10, 64)
        checkError(err)
        n := int32(nTemp)
        mTemp, err := strconv.ParseInt(firstMultipleInput[1], 10, 64)
        checkError(err)
        m := int32(mTemp)

        maxSumTemp, err := strconv.ParseInt(firstMultipleInput[2], 10, 64)
        checkError(err)
        maxSum := int32(maxSumTemp)

        aTemp := strings.Split(strings.TrimSpace(readLine(reader)), " ")

        var a []int32

        for i := 0; i < int(n); i++ {
            aItemTemp, err := strconv.ParseInt(aTemp[i], 10, 64)
            checkError(err)
            aItem := int32(aItemTemp)
            a = append(a, aItem)
        }

        bTemp := strings.Split(strings.TrimSpace(readLine(reader)), " ")

        var b []int32

        for i := 0; i < int(m); i++ {
            bItemTemp, err := strconv.ParseInt(bTemp[i], 10, 64)
            checkError(err)
            bItem := int32(bItemTemp)
            b = append(b, bItem)
        }

        result := twoStacks(maxSum, a, b)

        fmt.Fprintf(writer, "%d\n", result)
    }

    writer.Flush()
}

func readLine(reader *bufio.Reader) string {
    str, _, err := reader.ReadLine()
    if err == io.EOF {
        return ""
    }

    return strings.TrimRight(string(str), "\r\n")
}

func checkError(err error) {
    if err != nil {
        panic(err)
    }
}
